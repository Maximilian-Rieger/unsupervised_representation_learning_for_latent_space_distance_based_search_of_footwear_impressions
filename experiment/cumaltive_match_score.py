import logging
import os, glob
import argparse

import torch
import torch.nn.init
import torch.backends.cudnn as cudnn
from utils.utils import GPU
from torchvision import transforms as Transforms
from experiment.experiment_aae import Experiment
from experiment.latentspace_distance import calculate_distance, calculate_patched_distance_batched
from dataloading.transforms import SlidingWindowTransformClass
from tqdm import tqdm
import matplotlib as mpl

from matplotlib.lines import Line2D

mpl.use('Agg')

import matplotlib.pyplot as plt

from matplotlib.figure import Figure


# noinspection PyArgumentList
def match_matrix_example():
    tensorparts = []
    tensorparts.append(torch.Tensor([[ 391.5345, 1414.4886, 1372.6154, 1428.3097, 1394.7384, 1430.5576,
         1355.5088, 1433.3181, 1462.8976, 1416.8163, 1412.8628, 1469.9940,
         1380.0758, 1401.2399, 1416.1506, 1384.1852, 1389.4435, 1420.8145,
         1407.2755, 1392.1084, 1350.8424, 1329.7080, 1393.1138, 1417.4189,
         1320.9661, 1362.8339, 1416.2773, 1471.6196, 1402.3871, 1456.6389,
         1360.5361, 1387.6442, 1403.8103, 1406.9175, 1404.2996, 1448.7587],
        [1415.8568,  387.6215, 1337.3378, 1383.7178, 1329.3601, 1443.8750,
         1350.7776, 1409.9786, 1403.6490, 1409.0463, 1398.1311, 1462.1329,
         1314.8170, 1397.2764, 1388.7596, 1322.7406, 1419.4576, 1468.5758,
         1390.3776, 1319.4935, 1357.9135, 1391.4893, 1313.1016, 1388.3090,
         1348.0005, 1376.3534, 1368.7146, 1381.4362, 1381.7753, 1438.1342,
         1400.5682, 1365.4663, 1381.0614, 1382.8873, 1422.8433, 1479.9550],
        [1370.4208, 1335.1212,  377.7146, 1380.3834, 1341.1066, 1426.0475,
         1325.4095, 1360.9403, 1474.0093, 1398.8308, 1403.7504, 1477.9789,
         1339.5105, 1381.1246, 1407.3922, 1348.6090, 1379.1880, 1481.5210,
         1380.3325, 1346.1849, 1338.2278, 1382.4089, 1348.6991, 1398.8685,
         1335.2040, 1347.1935, 1377.0977, 1437.0513, 1376.2991, 1469.7318,
         1386.3348, 1375.7728, 1390.5930, 1371.4132, 1402.5978, 1496.6490],
        [1426.8790, 1383.8496, 1382.4728,  383.5893, 1399.8704, 1409.3333,
         1369.3041, 1318.7639, 1429.0306, 1402.6884, 1415.2539, 1436.3260,
         1287.0654, 1364.2357, 1412.2128, 1398.5237, 1404.5676, 1490.5070,
         1435.1228, 1350.2562, 1367.6899, 1376.7490, 1362.1654, 1409.4006,
         1350.7974, 1397.7791, 1319.8478, 1374.7277, 1384.9969, 1374.9257,
         1377.7660, 1355.1881, 1360.5714, 1379.0173, 1443.8409, 1458.3916],
        [1394.7251, 1332.2310, 1341.2601, 1400.5806,  389.3272, 1456.7837,
         1338.5729, 1408.9714, 1441.0883, 1396.1034, 1402.9150, 1470.4664,
         1316.0638, 1406.5515, 1376.0353, 1344.8031, 1386.3243, 1469.8387,
         1383.4598, 1351.0579, 1340.3005, 1370.3184, 1338.0149, 1399.7491,
         1367.1383, 1381.2476, 1382.2173, 1401.8066, 1405.0211, 1478.9409,
         1410.9458, 1384.5272, 1397.4824, 1398.5541, 1424.5675, 1489.1292]]))
    tensorparts.append(torch.Tensor([[1430.2491, 1446.5452, 1423.6349, 1407.9467, 1456.7509,  380.6936,
         1355.9315, 1402.6847, 1492.7981, 1425.0664, 1420.9573, 1434.9397,
         1349.6683, 1364.2059, 1447.3011, 1434.8998, 1391.6083, 1490.4534,
         1468.1848, 1429.1267, 1429.7850, 1417.7490, 1412.5310, 1420.9299,
         1367.4398, 1422.8409, 1456.5237, 1457.4998, 1394.1466, 1448.1323,
         1404.4291, 1427.7152, 1445.0411, 1449.5116, 1447.7169, 1480.6498],
        [1354.3103, 1354.9884, 1322.5056, 1370.2744, 1340.4326, 1357.8759,
          376.2344, 1367.4048, 1415.0120, 1295.6256, 1267.1366, 1393.3724,
         1256.5027, 1350.1204, 1281.2502, 1300.5641, 1288.3365, 1395.9454,
         1370.0082, 1355.2104, 1322.5651, 1312.7577, 1360.0996, 1393.3158,
         1247.7955, 1358.6157, 1373.1300, 1335.9166, 1288.7812, 1365.3363,
         1347.6897, 1356.2433, 1337.3119, 1357.7115, 1348.9019, 1425.8126],
        [1432.5807, 1409.5920, 1357.7838, 1315.9130, 1405.5526, 1401.1172,
         1368.3412,  374.2000, 1507.2990, 1387.8269, 1419.0236, 1441.8025,
         1344.1074, 1341.7057, 1447.7483, 1382.9004, 1366.7607, 1489.0380,
         1437.1060, 1370.0029, 1340.5017, 1378.4103, 1396.0820, 1452.2092,
         1354.3351, 1369.4655, 1406.0575, 1423.9779, 1421.2401, 1462.2339,
         1381.5266, 1389.6725, 1366.3512, 1379.8607, 1420.7322, 1450.1321],
        [1460.9457, 1404.3108, 1473.9093, 1425.5326, 1437.3462, 1492.5658,
         1412.8674, 1509.1449,  380.4393, 1438.2589, 1461.6433, 1477.3879,
         1337.4346, 1457.5327, 1413.6647, 1430.4761, 1472.0466, 1507.2635,
         1482.2539, 1437.2627, 1462.4247, 1429.2136, 1439.2966, 1436.4666,
         1405.4976, 1462.1206, 1373.6423, 1440.4666, 1459.3672, 1463.6028,
         1441.0923, 1449.4957, 1422.6183, 1453.0925, 1470.3816, 1520.2477],
        [1414.6760, 1410.2891, 1400.0166, 1404.8131, 1393.4968, 1419.6772,
         1294.6372, 1387.3159, 1436.3965,  373.1603, 1191.8109, 1415.1602,
         1284.9200, 1406.0396, 1298.9043, 1378.3956, 1350.0291, 1416.2952,
         1399.9775, 1399.5740, 1380.6488, 1372.2671, 1410.2554, 1402.0746,
         1264.0110, 1367.6392, 1407.9050, 1372.0981, 1330.4457, 1401.0216,
         1399.7991, 1398.0262, 1334.4791, 1380.9044, 1375.0326, 1488.4735]]))
    tensorparts.append(torch.Tensor([[1413.7891, 1402.9764, 1403.6427, 1414.1219, 1406.5178, 1424.0027,
         1269.2717, 1418.2416, 1462.2186, 1190.8488,  375.4306, 1439.3447,
         1291.7803, 1437.5132, 1314.6393, 1375.5223, 1331.4949, 1439.0602,
         1416.1730, 1404.6663, 1375.7408, 1368.9299, 1407.5403, 1429.1321,
         1275.1400, 1374.2897, 1443.8243, 1355.4546, 1300.8979, 1424.4685,
         1379.8824, 1400.9994, 1369.1753, 1391.8179, 1362.3846, 1448.3708],
        [1472.0498, 1463.4644, 1473.8673, 1432.6260, 1470.5255, 1431.8917,
         1397.2971, 1442.5261, 1480.4330, 1416.4181, 1439.0223,  373.2125,
         1368.6653, 1419.7072, 1423.4285, 1455.1974, 1448.8612, 1486.3712,
         1497.5553, 1438.4756, 1455.8972, 1402.9950, 1450.2656, 1473.4717,
         1392.8986, 1467.0675, 1468.5411, 1473.2317, 1447.4501, 1479.6667,
         1446.0524, 1461.7355, 1441.9648, 1464.0212, 1484.8433, 1500.6345],
        [1378.8040, 1313.4265, 1337.6388, 1285.2278, 1316.4683, 1346.1650,
         1257.1598, 1344.7676, 1336.7324, 1289.0979, 1292.6074, 1369.4164,
          376.5266, 1329.6461, 1269.5884, 1315.2434, 1310.8638, 1415.5355,
         1382.1034, 1327.3282, 1331.6746, 1364.1058, 1336.5269, 1353.0601,
         1303.2059, 1332.6537, 1306.3452, 1321.9554, 1328.3977, 1382.1000,
         1355.2643, 1342.8661, 1309.9020, 1364.1505, 1389.8348, 1448.1830],
        [1402.4604, 1398.9524, 1376.6228, 1366.5460, 1405.9625, 1363.2498,
         1350.3499, 1342.0226, 1456.7186, 1409.1490, 1435.9333, 1420.7511,
         1327.7988,  386.9354, 1412.0359, 1373.6146, 1389.6927, 1472.4624,
         1422.4171, 1393.8237, 1383.7626, 1377.8508, 1390.6779, 1397.5599,
         1334.6549, 1384.2118, 1400.1334, 1446.3051, 1394.1306, 1435.8866,
         1371.4591, 1362.3309, 1394.9889, 1382.4523, 1413.9608, 1452.5605],
        [1419.3418, 1388.5603, 1406.0546, 1410.8325, 1375.9067, 1445.7136,
         1282.5853, 1448.3030, 1414.5796, 1297.0664, 1313.5312, 1426.2256,
         1269.1693, 1410.1748,  375.3488, 1356.5289, 1386.4282, 1392.6653,
         1417.8235, 1411.9648, 1390.3529, 1364.8621, 1415.3699, 1399.1760,
         1364.7107, 1410.6189, 1416.0688, 1364.4203, 1381.2935, 1402.6200,
         1396.8978, 1420.2765, 1337.6177, 1427.3075, 1450.7650, 1480.0424]]))
    tensorparts.append(torch.Tensor([[1382.9354, 1330.0111, 1347.6569, 1399.3999, 1346.2203, 1435.0686,
         1299.0438, 1381.5258, 1432.6898, 1377.8550, 1371.8282, 1453.6692,
         1314.3900, 1376.1147, 1356.1842,  385.3140, 1359.8281, 1419.2507,
         1387.6113, 1345.1782, 1339.6389, 1362.2900, 1344.9540, 1392.5939,
         1325.7009, 1354.2920, 1379.2872, 1406.6263, 1379.6127, 1436.2804,
         1384.5958, 1373.7587, 1316.7305, 1298.0530, 1398.6600, 1433.3115],
        [1387.7373, 1416.9325, 1380.1304, 1405.3182, 1384.4772, 1389.9650,
         1287.2310, 1367.1996, 1469.2552, 1348.5137, 1332.1820, 1451.0321,
         1312.5005, 1389.7522, 1386.1552, 1360.8060,  379.1704, 1448.0542,
         1423.2053, 1403.6744, 1365.5302, 1367.4733, 1398.8965, 1431.6976,
         1313.0281, 1390.2275, 1421.4760, 1437.6893, 1350.7858, 1422.2788,
         1394.0864, 1391.8518, 1421.1064, 1402.6573, 1372.8842, 1445.1793],
        [1417.4264, 1468.5566, 1480.2196, 1493.1289, 1470.0863, 1492.8418,
         1392.1061, 1490.2369, 1508.4470, 1415.9639, 1437.5679, 1485.4546,
         1413.1588, 1473.4053, 1392.6355, 1415.5103, 1449.0481,  376.1084,
         1495.9552, 1476.7212, 1421.3376, 1376.6538, 1472.6699, 1488.3367,
         1385.7294, 1458.7369, 1487.7913, 1477.5555, 1465.4697, 1481.8843,
         1443.6449, 1482.0210, 1387.4202, 1450.1785, 1490.3894, 1485.1260],
        [1406.2972, 1391.3542, 1380.2810, 1430.7493, 1385.8375, 1467.7711,
         1367.2020, 1435.7928, 1479.9640, 1404.8972, 1417.4204, 1498.9110,
         1385.3184, 1424.3781, 1417.6852, 1386.3766, 1424.6860, 1497.7141,
          393.4479, 1364.2241, 1363.8014, 1349.4573, 1361.2374, 1354.9895,
         1337.6720, 1390.8834, 1425.4695, 1434.4299, 1404.8689, 1456.3302,
         1399.3369, 1388.0570, 1404.9204, 1423.5592, 1390.7047, 1524.2513],
        [1390.5314, 1318.7438, 1347.7882, 1348.6017, 1351.1699, 1427.5803,
         1355.0760, 1371.0789, 1437.2365, 1402.3022, 1400.4845, 1439.6519,
         1326.8237, 1391.1971, 1410.6949, 1344.3379, 1402.3885, 1476.7103,
         1363.3512,  389.3185, 1304.3459, 1364.7097, 1265.2954, 1350.6595,
         1311.3210, 1359.2017, 1346.2765, 1392.0592, 1371.2024, 1400.4961,
         1370.1334, 1362.2012, 1356.8282, 1356.2516, 1403.4128, 1457.8988]]))
    tensorparts.append(torch.Tensor([[1348.6743, 1358.8452, 1337.0601, 1365.3617, 1341.6945, 1431.8298,
         1326.9519, 1338.1777, 1456.4127, 1379.4926, 1375.4305, 1458.4708,
         1332.3384, 1382.2513, 1388.5271, 1337.4336, 1366.4216, 1423.2413,
         1365.4105, 1305.5426,  380.4438, 1292.0865, 1334.8624, 1375.4082,
         1262.0857, 1297.0211, 1347.8475, 1350.6372, 1362.1890, 1423.8167,
         1326.2242, 1331.8726, 1335.5474, 1316.1749, 1371.6919, 1413.9625],
        [1331.4263, 1391.9435, 1382.5936, 1373.7311, 1368.7301, 1422.9082,
         1315.3798, 1380.9426, 1431.1135, 1374.1808, 1367.1053, 1404.0684,
         1366.7200, 1375.6328, 1363.2577, 1360.0073, 1371.0378, 1376.3892,
         1350.3442, 1367.0994, 1290.2909,  384.4359, 1369.4709, 1378.0970,
         1264.0525, 1337.2948, 1405.7239, 1398.2683, 1353.5480, 1417.2823,
         1251.8560, 1366.8616, 1352.9332, 1389.6061, 1341.4993, 1420.9344],
        [1393.6272, 1314.8091, 1349.7551, 1360.7646, 1338.9125, 1411.4449,
         1359.4894, 1394.6017, 1440.2689, 1411.3979, 1405.4933, 1453.4850,
         1337.4415, 1392.8817, 1413.8636, 1345.2611, 1400.6318, 1470.3253,
         1358.1149, 1264.7241, 1334.3871, 1370.4325,  387.0224, 1358.5408,
         1323.0852, 1373.5869, 1363.6766, 1401.8346, 1379.6565, 1410.7404,
         1375.0201, 1351.9225, 1376.8738, 1373.1228, 1367.1219, 1484.9968],
        [1417.3984, 1388.1025, 1397.4711, 1410.0822, 1398.0355, 1416.6068,
         1393.1963, 1455.2617, 1435.9103, 1401.9202, 1429.8286, 1474.7148,
         1354.9368, 1396.3230, 1399.0253, 1394.2688, 1431.8575, 1486.5625,
         1354.3110, 1348.8953, 1375.7513, 1379.8313, 1358.1746,  383.3255,
         1344.3619, 1375.5713, 1401.1605, 1413.8228, 1370.2405, 1436.5858,
         1385.1233, 1382.8962, 1390.9788, 1406.6425, 1406.8071, 1514.5278],
        [1322.9565, 1345.8269, 1333.4492, 1348.2189, 1365.0667, 1371.2634,
         1249.5085, 1353.2296, 1407.4220, 1267.2412, 1275.5265, 1395.7285,
         1304.6841, 1334.8094, 1366.6288, 1327.7615, 1312.7529, 1385.9072,
         1337.5789, 1310.1210, 1263.2762, 1263.3352, 1322.1721, 1343.0228,
          373.8107, 1257.4097, 1354.3182, 1338.9272, 1226.9968, 1318.0291,
         1267.4595, 1311.3693, 1261.8541, 1306.2314, 1258.9071, 1376.2115]]))
    tensorparts.append(torch.Tensor([[1362.7563, 1378.4697, 1345.8202, 1399.8324, 1378.7247, 1421.0195,
         1359.3199, 1369.2155, 1459.0981, 1367.9827, 1374.4255, 1462.9719,
         1329.6045, 1387.6002, 1410.7151, 1356.0208, 1387.4629, 1458.9445,
         1390.5249, 1357.9788, 1297.3556, 1339.1986, 1374.9481, 1375.0774,
         1257.0427,  376.5678, 1373.8749, 1374.9739, 1315.2076, 1447.5343,
         1291.0948, 1331.8621, 1298.4371, 1327.0839, 1323.8378, 1404.1820],
        [1417.7540, 1369.7855, 1379.8656, 1317.1569, 1383.0940, 1454.6970,
         1375.1523, 1408.3387, 1374.3616, 1408.4138, 1441.0236, 1468.5413,
         1308.4830, 1399.9659, 1416.2090, 1382.1926, 1421.4199, 1486.0935,
         1425.9619, 1348.6794, 1346.8373, 1403.7642, 1365.8402, 1399.2977,
         1353.7524, 1371.8838,  379.5170, 1379.8507, 1389.4673, 1361.3413,
         1371.2672, 1331.3464, 1321.4146, 1350.1072, 1415.5951, 1452.0094],
        [1473.0221, 1384.3439, 1438.0377, 1376.6510, 1402.5378, 1458.1927,
         1337.5740, 1423.2542, 1437.7692, 1371.2546, 1356.2090, 1470.3287,
         1324.5813, 1445.5381, 1365.6873, 1406.9453, 1438.3071, 1476.7581,
         1434.4487, 1389.7875, 1350.4666, 1398.8977, 1405.7194, 1416.8054,
         1335.0409, 1372.1066, 1377.6628,  372.1230, 1344.3690, 1387.5360,
         1388.7178, 1378.1254, 1262.4987, 1365.8345, 1432.7373, 1487.5229],
        [1399.5618, 1380.9966, 1377.7024, 1384.3716, 1403.0656, 1397.9922,
         1290.0775, 1418.9630, 1459.7678, 1330.9524, 1301.4331, 1446.5446,
         1330.6292, 1396.1100, 1383.4700, 1378.3760, 1351.1273, 1465.4036,
         1404.9802, 1374.4010, 1363.1146, 1353.8075, 1380.6980, 1368.3477,
         1227.6118, 1317.8065, 1388.2623, 1347.5450,  373.6405, 1394.0771,
         1308.8690, 1354.1093, 1319.6494, 1379.8488, 1319.8643, 1458.1061],
        [1456.5646, 1437.4219, 1472.0690, 1376.2814, 1478.8286, 1447.1134,
         1367.3259, 1459.2894, 1464.7877, 1400.9320, 1422.3232, 1481.8998,
         1382.9474, 1436.1051, 1403.1929, 1435.9354, 1420.5813, 1481.8844,
         1457.6266, 1402.4355, 1421.6412, 1417.0743, 1411.1316, 1438.0084,
         1319.4036, 1446.6470, 1364.6975, 1387.8867, 1390.9382,  374.1933,
         1380.8623, 1385.0764, 1326.9729, 1433.3910, 1402.2994, 1475.9868]]))
    tensorparts.append(torch.Tensor([[1359.6074, 1402.2839, 1385.8591, 1374.5273, 1410.2083, 1403.3505,
         1347.2772, 1380.8090, 1437.4250, 1400.7555, 1377.7385, 1445.7057,
         1353.7527, 1370.9005, 1398.8258, 1383.9366, 1393.7340, 1443.8484,
         1398.3179, 1370.5162, 1324.9238, 1252.6902, 1374.4763, 1386.9862,
         1267.7953, 1291.2854, 1367.5084, 1388.6017, 1309.7458, 1378.9757,
          375.6372, 1320.8369, 1300.6190, 1380.7842, 1341.9084, 1401.4606],
        [1388.1908, 1365.8883, 1372.8337, 1355.4360, 1380.5339, 1426.5172,
         1357.2395, 1392.2577, 1445.9884, 1396.1344, 1402.0601, 1460.5153,
         1341.6428, 1363.7233, 1419.3799, 1371.0187, 1390.9070, 1479.0225,
         1389.2684, 1362.9790, 1333.5519, 1364.0327, 1350.1605, 1382.0526,
         1313.2047, 1329.1842, 1329.1439, 1375.3542, 1353.7463, 1383.2423,
         1320.2792,  389.0547, 1342.0994, 1359.1155, 1370.8899, 1434.7976],
        [1403.5398, 1377.9441, 1391.5664, 1359.0393, 1397.2797, 1445.4818,
         1339.1427, 1366.9385, 1425.6835, 1335.5872, 1367.7926, 1440.8169,
         1311.3362, 1393.4547, 1336.0242, 1315.6835, 1418.1395, 1388.0867,
         1406.0663, 1355.5952, 1336.3048, 1352.1884, 1376.1825, 1393.4896,
         1264.2091, 1301.2775, 1320.3839, 1263.3409, 1320.1769, 1327.6063,
         1299.2456, 1344.9779,  375.6102, 1269.8815, 1363.1910, 1411.8632],
        [1405.8914, 1383.6835, 1374.2893, 1375.0137, 1402.5652, 1449.4822,
         1356.9283, 1381.2979, 1456.6947, 1382.3356, 1391.2855, 1463.3022,
         1365.0337, 1382.4937, 1426.8383, 1301.4102, 1406.2329, 1450.7855,
         1424.3688, 1357.3568, 1315.3995, 1387.1774, 1373.7874, 1402.5951,
         1303.2219, 1325.7721, 1353.5784, 1364.9153, 1376.8339, 1434.8451,
         1378.9072, 1363.8696, 1270.9116,  383.8105, 1390.2714, 1424.7284],
        [1404.8768, 1422.3894, 1401.8337, 1442.3871, 1424.9210, 1448.1349,
         1346.8112, 1422.3054, 1469.0280, 1369.9418, 1362.8868, 1483.2827,
         1390.4492, 1411.1841, 1449.3043, 1398.2000, 1375.0758, 1489.8300,
         1389.8541, 1402.5537, 1369.8210, 1345.2009, 1370.5597, 1406.9044,
         1257.8247, 1320.1644, 1417.4995, 1433.2695, 1318.9558, 1404.9132,
         1340.9905, 1371.9521, 1360.2872, 1388.3756,  376.5151, 1452.3678]]))
    tensorparts.append(torch.Tensor([[1452.0616, 1477.5472, 1497.3435, 1459.7212, 1488.9426, 1479.3638,
         1426.4834, 1450.1240, 1519.5442, 1484.7544, 1449.3434, 1497.9753,
         1450.2487, 1451.0328, 1480.8612, 1433.5074, 1442.0150, 1488.4476,
         1523.0209, 1458.6245, 1414.4095, 1424.5162, 1482.9326, 1513.7686,
         1372.4640, 1401.5604, 1455.5708, 1489.4646, 1457.9773, 1475.5885,
         1401.7380, 1439.4855, 1412.4535, 1423.9321, 1451.9424,  372.9916]]))
    return torch.cat(tensorparts, dim=0)


def plot_cms(cms, file, alpha=1):
    cms = [0] + cms
    cms_length = len(cms)
    cms_max = max(cms)
    cms = [x / cms_max for x in cms]

    plt.clf()
    plt.plot(cms, alpha=alpha, color="c")
    plt.hlines(0, 0, cms_length + 1, linewidth=1, color="k")
    plt.xticks(range(0, cms_length, 1), range(0, cms_length + 2, 1), rotation="vertical")
    plt.yticks([x / 10 for x in range(0, 12, 1)])
    plt.xlim(left=0, right=cms_length)
    plt.ylim(bottom=0, top=1.1)
    plt.xlabel("Items")
    plt.ylabel("match score")
    plt.title("Cumulative match score")
    plt.grid(True)
    plt.legend([Line2D([0], [0], color="c", lw=4)], ['match score'], loc='center',  bbox_to_anchor=(0.5, -0.20))
    plt.savefig(file, bbox_inches='tight', pad_inches=1)


# mit cumulative match score evalurieren
def match_matrix(data, encoder, transforms, dist=torch.dist):
    c = len(data)
    pbr = tqdm(data)
    pbr.set_description('Match Matrix')
    res = [[0 for x in range(c)] for y in range(c)]
    res_ = [[0 for x in range(c)] for y in range(c)]
    for i, img_a in enumerate(pbr):
        for n, img_b in enumerate(data):
            res[i][n] = (calculate_patched_distance_batched(img_a, img_b, encoder, transforms, dist=dist), n, i == n)
    for i, line in enumerate(res):
        res_[i] = sorted(line, key=lambda item: item[0])
    return res_


def pull_front(matrix, i):
    return torch.cat((torch.unsqueeze(matrix[i], 0), matrix[0:i], matrix[i + 1:]), 0)


# noinspection PyArgumentList
def fix_matrix(matrix):
    res = torch.Tensor(matrix.shape)
    for i in range(matrix.shape[0]):
        res[i, :] = pull_front(matrix[i, :], i)
    return res

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def print_matrix(matrix, threshhold=0):
    for i in range(len(matrix)):
        print(end='\n|')
        for n in range(len(matrix)):
            print_numbr(matrix, i, n, threshhold)


def print_numbr(matrix, i, n, threshhold=0):
    if matrix[i][n][0] < threshhold:
        print(bcolors.OKGREEN + "{0:.2f}".format(matrix[i][n][0]), end=bcolors.ENDC+'|')
    else:
        print(bcolors.BOLD + "{0:.2f}".format(matrix[i][n][0]), end=bcolors.ENDC+'|')


def cms(matrix):
    match_count = 0
    miss_count = 0
    for i in range(matrix.shape[0]):
        if torch.argmin(matrix[i, :], 0) != 0:
            miss_count += 1
        else:
            match_count += 1
    return match_count, miss_count


def argmax(items, key=lambda x: x[1]):
    return max(enumerate(items), key=key)


def vertical_sum(matrix):
    vertical_sums = [0 for x in range(len(matrix))]
    for i, line in enumerate(matrix):
        for n, item in enumerate(line):
            vertical_sums[n] += int(item[2])
    return vertical_sums


def make_steps(row):
    vs_stepped = [0 for x in range(len(row))]
    for i, x in enumerate(row):
        vs_stepped[i] = (x if i == 0 else x + vs_stepped[i - 1])
    return vs_stepped


def cms_full(matrix):
    vs = vertical_sum(matrix)
    print()
    print(vs)
    vs = make_steps(vs)
    return vs


def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s ')

    # Training settings
    parser = argparse.ArgumentParser(description='Impress Cumulative Match Score')
    parser.add_argument('--dataset', type=str, metavar='DATASET', help='jsonPath to datasetRoot')
    parser.add_argument('--model', default=None, required=True, type=str, metavar='PATH',
                        help='jsonPath to checkpoint of model')
    parser.add_argument('--latent_size', default=100, required=True, type=int, metavar='LATENT_SIZE',
                        help='latentspace size the model uses (default: 100)')
    parser.add_argument('--img_shape', default=256, required=True, type=int, metavar='IMG_SHAPE',
                        help='image size the model uses (default: 256)')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='enables CUDA training')
    parser.add_argument('--gpuid', default='-1', type=str, help='id(s) for CUDA_VISIBLE_DEVICES')
    args = parser.parse_args().__dict__

    args['cuda'] = not args['no_cuda'] and torch.cuda.is_available()

    if args['cuda']:
        GPU.set(args['gpuid'], 400)
        cudnn.benchmark = True

    if 'model' not in args:
        raise AssertionError('a model to use must be passed')

    data_r = os.path.join(args['dataset'], '*', '*_1_R.jpg')
    data_r = glob.glob(data_r)
    data_l = os.path.join(args['dataset'], '*', '*_3_L.jpg')
    data_l = glob.glob(data_l)
    data = data_r + data_l
    data_len = len(data)
    logging.info('Calculating cms for {} images'.format(data_len))

    models = Experiment.load_model(args['model'], args['img_shape'], args['latent_size'], show_summary=False)
    [model.eval() for model in models]
    encoder, decoder, discriminator = models
    transforms = Transforms.Compose([
        Transforms.ToTensor(),
        SlidingWindowTransformClass(args['img_shape'], args['img_shape']),
    ])

    # cos = torch.nn.CosineSimilarity(dim=1)
    # dist = lambda x, y: cos(x, y).add(torch.ones(len(x))).sum()

    # matrix = match_matrix(data, encoder, transforms, dist=dist)
    matrix = match_matrix(data, encoder, transforms)

    try:
        print_matrix(matrix, 400)
    except AttributeError as e:
        logging.info('error while printing matrix')
        logging.error(e)

    res = cms_full(matrix)
    # res = [36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    # res = make_steps(res)

    plot_cms(res, 'cms.fig.perceiver.png')
    print()
    print(res)


if __name__ == '__main__':
    main()
